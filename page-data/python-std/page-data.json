{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-std/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"db070737-148a-5577-8be8-63e3159c99f4","excerpt":"What is Linux pipe Generally, you can redirect/channeling stdin/out from one program to another under a CLI: Handling text data Example: Handling binary data","html":"<h2>What is Linux pipe</h2>\n<p>Generally, you can redirect/channeling stdin/out from one program to another under a CLI:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># some examples\necho $SHELL &gt; shell.txt\ncat shell.txt | grep zsh</code></pre></div>\n<h2>Handling text data</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    desc <span class=\"token operator\">=</span> <span class=\"token string\">\"Reverse text file content\"</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span>desc<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># default to stdin</span>\n    <span class=\"token comment\"># so if no file given, we read from stdin</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"files\"</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span>argparse<span class=\"token punctuation\">.</span>FileType<span class=\"token punctuation\">(</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    argv <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    files <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">.</span>files\n    <span class=\"token keyword\">return</span> files\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reverse_content</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># if file given, some codes here</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># read from stdin</span>\n        content <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># output to stdout</span>\n        sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    files <span class=\"token operator\">=</span> parse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    reverse_content<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &quot;ABCDEFG&quot; | python playground.py\n# output: GFEDCBA</code></pre></div>\n<h2>Handling binary data</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    desc <span class=\"token operator\">=</span> <span class=\"token string\">\"Reverse any file content\"</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span>desc<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Instead of stdin</span>\n    <span class=\"token comment\"># We read binary data from buffer </span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"files\"</span><span class=\"token punctuation\">,</span> nargs<span class=\"token operator\">=</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span>argparse<span class=\"token punctuation\">.</span>FileType<span class=\"token punctuation\">(</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    argv <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    files <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">.</span>files\n\n    <span class=\"token keyword\">return</span> files\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reverse_content</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># if file given... some codes here</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># read directly from buffer of the stdin</span>\n        content <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># type(content) == bytes</span>\n\n        <span class=\"token comment\"># output binary data to buffer, two</span>\n        sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    files <span class=\"token operator\">=</span> parse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    reverse_content<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"How to integrate Linux pipe in your Python program","date":"December 10, 2018","category":"code"}}},"pageContext":{"slug":"/python-std/"}}}