{"componentChunkName":"component---src-templates-blog-post-js","path":"/255.-verify-preorder-sequence-bst/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"4e150a27-3de9-53b3-8b57-a80093952f41","excerpt":"Question: https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/ Post: https://leetcode.com/problems/verify-preorder-sequence-in-binaryâ€¦","html":"<p>Question: <a href=\"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/\">https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/</a></p>\n<p>Post: <a href=\"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/discuss/1127765/java-stack-10-lines-of-code-on-7ms\">https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/discuss/1127765/java-stack-10-lines-of-code-on-7ms</a></p>\n<p>We want to check that if the binary search tree constructed from the pre-order traverse is valid, i.e the <code class=\"language-text\">left child &lt; root &lt; right child</code> . We use a stack to store the value of <code class=\"language-text\">root</code> we have seen so far, and an additional variable <code class=\"language-text\">prev</code> to store the previous value poped from stack, so that we can check if right child is always <code class=\"language-text\">&gt;  root</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">verifyPreorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> each<span class=\"token operator\">:</span> preorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> each<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                prev <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">></span> each<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n                \n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"255. Verify Preorder Sequence in Binary Search Tree","date":"March 25, 2021","category":"leetcode"}}},"pageContext":{"slug":"/255.-verify-preorder-sequence-bst/"}}}