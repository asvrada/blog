{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-compare/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"435f5116-9f80-5ccd-b9cd-e94c4159ce66","excerpt":"What is  in Python and how to use them. id The built-in function  is like the pointer in C/C++, it can uniquely identify an object, and even for the same object…","html":"<p>What is <code class=\"language-text\">id, hash, ==, !=</code> in Python and how to use them.</p>\n<h1>id</h1>\n<p>The built-in function <code class=\"language-text\">id</code> is like the pointer in C/C++, it can uniquely identify an object, and even for the same object, its value will be different between two runs of the program. It’s like the pointer in C/C++ because the memory location would always change for different runs. If <code class=\"language-text\">id(x) == id(y)</code>, then x and y are exactly the same object</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Num</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num\n\n\nn <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># first run:</span>\n<span class=\"token number\">4317974864</span>\n<span class=\"token number\">4315161744</span>\n\n<span class=\"token comment\"># second run:</span>\n<span class=\"token number\">4546015440</span>\n<span class=\"token number\">4543202448</span></code></pre></div>\n<p>We can see that even the content (Num(100) and 1) has the same value during these two runs, they don’t have the same id. </p>\n<p>Also the id won’t be the same for two instance of a class, even if they have exactly the same content:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Num</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num\n\n\nn1 <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nn2 <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># output</span>\n<span class=\"token number\">4360906320</span>\n<span class=\"token number\">4360906384</span></code></pre></div>\n<p>In summary, <code class=\"language-text\">id</code> is like pointer, each instance has a unique id.</p>\n<h1>hash</h1>\n<p>Like <code class=\"language-text\">id</code>, the <code class=\"language-text\">hash</code> function would return some random number, except that this number is calculated in a way that the same value would always results in the same hash value. It’s more controlled than <code class=\"language-text\">id</code>.</p>\n<p>For a class in python, without overriding <code class=\"language-text\">__hash__</code> function, the hash value for two instances with the same value would still be different:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Num</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num\n\n\nn1 <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nn2 <span class=\"token operator\">=</span> Num<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># first run</span>\n<span class=\"token number\">274718565</span>\n<span class=\"token number\">274718569</span>\n\n<span class=\"token comment\"># second run</span>\n<span class=\"token number\">281771105</span>\n<span class=\"token number\">281771109</span></code></pre></div>\n<p>If we wish to treat two instances to be the same if they have exactly the same value, then we could add <code class=\"language-text\">__hash__</code> to the class like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Num</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__hash__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>For a more complicated class, return the hash value of a tuple of variables of the class that when combined, could uniquely identify an instance would do the job.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key \n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__hash__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\na <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># first run:</span>\n<span class=\"token number\">3713081631935493181</span>\n<span class=\"token number\">3713081631935493181</span>\n<span class=\"token number\">3713081631934410656</span>\n\n<span class=\"token comment\"># second run:</span>\n<span class=\"token number\">3713081631935493181</span>\n<span class=\"token number\">3713081631935493181</span>\n<span class=\"token number\">3713081631934410656</span></code></pre></div>\n<p>Now we could compare two instances of the same class by checking the hash value. But of course there is a better way to do this.</p>\n<h1>== / !=</h1>\n<p>To compare two instances of the same class, always override <code class=\"language-text\">__eq__</code> and <code class=\"language-text\">__nq__</code>. It may seem unnecessary to implement both, since if <code class=\"language-text\">__eq__</code> returns True, then logically <code class=\"language-text\">__nq__</code> returns False. However you could have both functions to return True and Python interpreter doesn’t check or care at all. So remember to always override two together like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key \n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__hash__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>key <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>value\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__ne__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>self <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span>\n\n\na <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> Pair<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># output</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token boolean\">True</span></code></pre></div>","frontmatter":{"title":"Python what is id, hash, ==, != for custom classes","date":"December 08, 2019","category":"code"}}},"pageContext":{"slug":"/python-compare/"}}}