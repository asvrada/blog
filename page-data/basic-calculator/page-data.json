{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic-calculator/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"8b2f790c-cc8d-5c27-ab05-2897ef4c0876","excerpt":"Basic Calculator Solution Basic Calculator II Solution Basic Calculator III Solution Following is a copy & paste from above link. Above are a series ofâ€¦","html":"<table>\n<thead>\n<tr>\n<th><a href=\"https://leetcode.com/problems/basic-calculator/\">Basic Calculator</a></th>\n<th><a href=\"https://leetcode.com/problems/basic-calculator/discuss/414898/Infix-to-Postfix-a-general-approach-to-similar-questions\">Solution</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://leetcode.com/problems/basic-calculator-ii/\">Basic Calculator II</a></td>\n<td><a href=\"https://leetcode.com/problems/basic-calculator-ii/discuss/414897/Infix-to-Postfix-a-general-approach-to-similar-questions\">Solution</a></td>\n</tr>\n<tr>\n<td><a href=\"https://leetcode.com/problems/basic-calculator-iii/\">Basic Calculator III</a></td>\n<td><a href=\"https://leetcode.com/problems/basic-calculator-iii/discuss/414896/Infix-to-Postfix-a-general-approach-to-similar-questions\">Solution</a></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Following is a copy &#x26; paste from above link.</p>\n</blockquote>\n<p>Above are a series of questions on LeetCode that require user to write a simple calculator to compute equations like <code class=\"language-text\">1+1</code> and <code class=\"language-text\">1x(3-6)/3</code>.</p>\n<p>These questions all ask we to evaluate a infix expression with simple math operators in it.</p>\n<p>Whats infix? For infix expression(the one we use daily) binary operators appear between two operands. And for postfix, operator appears after operand, even for unary operand.</p>\n<p>The same expression represented in two forms:<br>\nInfix:<br>\n<code class=\"language-text\">1 - (2 + 3)</code></p>\n<p>Postfix:<br>\n<code class=\"language-text\">1 2 3 + -</code></p>\n<p>Evaluating postfix expressions is much easier and simpler than infix ones, so the general idea is to convert infix expression to a postfix one, and evaluate postfix expression with the help of stack.</p>\n<p>The general solution comes in two parts:</p>\n<ol>\n<li>Convert infix expression to postfix expression</li>\n<li>Evaluate postfix expression</li>\n</ol>\n<h2>Convert</h2>\n<p>Here is the algorithm I found online:</p>\n<p><a href=\"https://condor.depaul.edu/ichu/csc415/notes/notes9/Infix.htm\">https://condor.depaul.edu/ichu/csc415/notes/notes9/Infix.htm</a></p>\n<p>For this question, the code looks like this. For the code for other questions, please see the link above.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\tstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># postfix result</span>\n\toutput <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\trank <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\"># None means no number is parsed</span>\n\tnum <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n\t<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\n\t\t<span class=\"token keyword\">if</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"0123456789\"</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t\t\tnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\tnum <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\n\t\t<span class=\"token comment\"># c is opeartor or ()</span>\n\t\t<span class=\"token comment\"># output prev num to output</span>\n\t\t<span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t\toutput<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t\t\tnum <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> c <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># pop until (</span>\n\t\t\t<span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n\t\t\t\toutput<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token comment\"># pop (</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># pop all aperator with higher or equal rank in stack, until meet (</span>\n\t\t\t<span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span> <span class=\"token keyword\">and</span> rank<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> rank<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\toutput<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token comment\"># push cur operator</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># handle leftover</span>\n\t<span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\toutput<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n\t\toutput<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Evaluate</h2>\n<p>The evaluation of postfix expression is much easier.</p>\n<p>We scan the expression from left to right, push every number into a stack, when encountered with a binary operation, we pop the top two numbers from the stack and do appropriate math operation on them, push back the result, and repeat.</p>\n<p>This operation remains almost the same for all three questions.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> token <span class=\"token keyword\">in</span> postfix<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> token <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tb <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> token <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\t\tb <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ta <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> token <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\t\ta <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tb <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> token <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\t\tb <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ta <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"title":"Infix to Postfix, a general approach to Basic Calculator problem set","date":"February 27, 2020","category":"leetcode"}}},"pageContext":{"slug":"/basic-calculator/"}}}