{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-truth-value-test/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"4adb0635-cec7-5e63-9295-be424eae8dda","excerpt":"If you are using Python, you probably will write something like this to check if a list is empty: That’s because empty list evaluates to , as described on…","html":"<p>If you are using Python, you probably will write something like this to check if a list is empty:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not empty!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty list\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s because empty list evaluates to <code class=\"language-text\">False</code>, as described on <a href=\"https://docs.python.org/3.7/library/stdtypes.html#truth\">official docs</a>,.</p>\n<p>But, if you type <code class=\"language-text\">[] == False</code> in a Python interactive shell and hit enter, the result is <code class=\"language-text\">False</code>!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; [] == False\nFalse</code></pre></div>\n<p>If empty list evaluates to <code class=\"language-text\">False</code> in a if statement, then why a direct comparision between empty list and <code class=\"language-text\">False</code> evaluates to <code class=\"language-text\">False</code>? It should be <code class=\"language-text\">True</code>, right? What’s happening here?</p>\n<p>Because of this, I am using <code class=\"language-text\">len(some_list) == 0</code> to check empty-ness since the beginning, which is the least confusing and most explict way to do this.</p>\n<p>But that doesn’t resolve the problem: I don’t know why it works, which didn’t really bother me, until today.</p>\n<h2>== operator</h2>\n<p>To know how things work, its better to have a look at the official documents, <a href=\"https://docs.python.org/3.7/library/stdtypes.html#index-7\">here</a> is the page for <code class=\"language-text\">==</code> operator.</p>\n<p>And this page makes it very clear:</p>\n<blockquote>\n<p>Objects of different types, except different numeric types, never compare equal.</p>\n</blockquote>\n<p>Back to <code class=\"language-text\">[] == False</code>, since these two objects are of different types: <code class=\"language-text\">list</code> and <code class=\"language-text\">bool</code> respectively, the result is <code class=\"language-text\">False</code>.</p>\n<p>You can check this by <code class=\"language-text\">[] == {}</code>, which evaluates to <code class=\"language-text\">False</code>, because even if they are both empty and will evaluates to <code class=\"language-text\">True</code> in a <code class=\"language-text\">if</code> statement, they are not of the same type.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># {} evaluates to False</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [] evaluates to False</span>\n    \n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># although they both evaluates to False above, the result here is False</span></code></pre></div>\n<h2>if statement</h2>\n<p>This part is described by <a href=\"https://docs.python.org/3.7/library/stdtypes.html#truth\">Truth Value Testing</a>.</p>\n<blockquote>\n<p>Any object can be tested for truth value, for use in an if or while condition</p>\n</blockquote>\n<p>So inside <code class=\"language-text\">if</code> statement, the truth value of variables like <code class=\"language-text\">[]</code> is defined by its <code class=\"language-text\">__bool__</code> functions:</p>\n<blockquote>\n<p>By default, an object is considered true unless its class defines either a <code class=\"language-text\">__bool__()</code> method that returns False or a <code class=\"language-text\">__len__()</code> method that returns zero, when called with the object.</p>\n</blockquote>\n<p>That explains why empty list evaluates to False in a if statement. Now I am more comfortable to use <code class=\"language-text\">if some_list: xxx</code> in my code!</p>","frontmatter":{"title":"About Python truth value test","date":"January 25, 2019","category":"code"}}},"pageContext":{"slug":"/python-truth-value-test/"}}}