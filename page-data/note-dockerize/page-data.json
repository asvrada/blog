{"componentChunkName":"component---src-templates-blog-post-js","path":"/note-dockerize/","result":{"data":{"site":{"siteMetadata":{"title":"Mindscape"}},"markdownRemark":{"id":"e8ffc47c-8171-5910-ace5-f3c3ffe2ddf7","excerpt":"Why copy package.json first in Dockerfile Source: https://nodejs.org/fr/docs/guides/nodejs-docker-webapp/ Note that, rather than copying the entire working…","html":"<h2>Why copy package.json first in Dockerfile</h2>\n<blockquote>\n<p>Source: <a href=\"https://nodejs.org/fr/docs/guides/nodejs-docker-webapp/\">https://nodejs.org/fr/docs/guides/nodejs-docker-webapp/</a></p>\n</blockquote>\n<blockquote>\n<p>Note that, rather than copying the entire working directory, we are only copying the package.json file. This allows us to take advantage of cached Docker layers.</p>\n</blockquote>\n<h2>How to use cached layer in Docker to accelerate build</h2>\n<p>For a frontend project, do as mentioned above. The key is to ignore files like <code class=\"language-text\">.idea</code> in <code class=\"language-text\">.dockerignore</code> that would often change unexpectedly.</p>\n<p>For example: the Dockerfile for my project and the <code class=\"language-text\">.dockerignore</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># First\nFROM node as builder\n\nCOPY package.json yarn.lock /app/\n\nWORKDIR /app/\n\nRUN yarn install --frozen-lockfile\n\nCOPY . /app/\n\nRUN yarn run build\n\n# Second\nFROM nginx\n\nCOPY --from=builder /app/build /usr/share/nginx/html\nCOPY ci/nginx.conf /etc/nginx/nginx.conf\n\nEXPOSE 80\n\n# Deamon off to tell nginx to run at foreground\nENTRYPOINT [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.DS_Store\n.git\n.gitignore\n.idea\n\nbuild\nnode_modules</code></pre></div>\n<h2>Why yarn.lock</h2>\n<p>This file is used to specify the exact version of library used in your project.</p>\n<p>Yes we have <code class=\"language-text\">package.json</code>, but the version specified in that file is usually a range of possible version to download, like <code class=\"language-text\">&quot;node-sass&quot;: &quot;^4.13.1&quot;</code>, see below link for detailed explanation on <code class=\"language-text\">^</code>(caret) and <code class=\"language-text\">~</code>(tilde)</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/22345808/5303092\">https://stackoverflow.com/a/22345808/5303092</a></p>\n</blockquote>\n<p>So yarn use <code class=\"language-text\">yarn.lock</code> to further store the exact version number used.</p>\n<blockquote>\n<p><a href=\"https://classic.yarnpkg.com/en/docs/yarn-lock/\">https://classic.yarnpkg.com/en/docs/yarn-lock/</a></p>\n</blockquote>\n<h2>warning has unmet peer dependency</h2>\n<p>You may have seen this when <code class=\"language-text\">yarn upgrade</code>, what is these, why is this here, and should I care?</p>\n<h3>What’s peer dependency</h3>\n<blockquote>\n<p><a href=\"https://nodejs.org/es/blog/npm/peer-dependencies/\">https://nodejs.org/es/blog/npm/peer-dependencies/</a><br>\n<a href=\"https://indepth.dev/npm-peer-dependencies/\">https://indepth.dev/npm-peer-dependencies/</a></p>\n</blockquote>\n<h3>Why is this warning here</h3>\n<p>These peer dependency of the package you use is not installed (i.e, not in your <code class=\"language-text\">package.json</code>’s dependency)</p>\n<h3>Should I care / Should I fix the warning</h3>\n<p>This is something I don’t really know after searching online and no answers found. Right now, if my build is successful, I don’t really care.</p>","frontmatter":{"title":"Some note on Dockerize React.js project","date":"May 03, 2020","category":"note"}}},"pageContext":{"slug":"/note-dockerize/"}}}