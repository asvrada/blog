---
title: 前端开发环境搭建
layout: post
tags: [code]
---

任何软件项目开发，最开始的一步一定是搭建环境。

不可否认的是前端是一个相当自由的技术，你完全可以在开发的时候把所有的html，css，js代码写进一个index.html，然后部署。技术上这是肯定可以的，但是很明显这并不是明智之举。

由于前端太过自由，开发环境也是五花八门。这里我只总结一下我所用过的，目前也是比较流行的，围绕 webpack 所展开的环境搭建。

关键词：npm，webpack

---

#### 包管理器
首先为电脑安装yarn（大概是npm的替代品？）。yarn是前端项目的包管理器，说到管理器大家一定不会陌生，这些软件类似于苹果的App Store，用户可以使用它们快速方便的下载各种软件。通过yarn包管理器我们可以快速的安装/管理前端开发时的各种依赖，而不用痛苦的为一个个依赖添加`<script>`标签来引入他们。

使用 `yarn init` 来新建一个依赖项配置文件`package.json`，通常该文件所在目录就可以作为项目的主目录了。之后我们可以使用 `yarn add [packages]` 来添加各项依赖。

如果你下载了别人现成的前端项目，则可以在目录下运行 `yarn install` 来安装所需依赖。

为什么需要包管理器？答案是显而易见的，它将人们从手动管理可能数以百计的依赖项的复杂重复劳动中解放了出来。

#### webpack
光有包管理器还不够，因为就算把依赖项通过 `yarn add xxx` 添加了进来，目前他们也还只是本地硬盘里的一个个零散文件，并不能被我们写的前端代码所使用。

这个时候webpack就出场了，作为一个打包器，它的职责便是将相关文件（项目代码，第三方库，资源等等）根据配置文件（默认为`webpack.config.js`）打包成目标文件。通过webpack，我们可以将项目所使用的各种库打包进最终输出文件，该文件将包含各个第三方库的所有文件，这样程序运行时便能够使用第三方库了。

有了包管理器，安装webpack也变得非常简单：`yarn add webpack -D`。

> 注意这里命令最后的 `-D`，这个意思是将该依赖视为开发时依赖，也就是说打包时会略过此代码。因为有些工具我们只在开发的时候用用，比如webpack，用户也用不着这玩意，自然我们就不用白白浪费空间把它的代码也打包进来。

一个典型的单页面前端项目初始文件如下：

```
.
├── dist              # 输出代码目录
│   └── app.bundle.js # 最终 webpack 生成的文件
├── index.html        # 程序入口 (HTML)
├── node_modules      # 包管理器下载的第三方库的储存目录
├── package.json      # 包管理器配置文件
├── src               # 源代码目录
│   └── main.js       # 程序入口（JS，CSS）
├── webpack.config.js # webpack 配置文件
└── yarn.lock         # yarn 的文件，不要管
```

使用这些工具，最终部署时只需要上传`index.html` 及 `app.bundle.js` 。它们包含了程序所需的所有代码。

可参考该简单项目：[Vue-点击速度测试](https://github.com/thissentenceiswrong/clickspeed-Vue)，了解开发环境的基本构成。